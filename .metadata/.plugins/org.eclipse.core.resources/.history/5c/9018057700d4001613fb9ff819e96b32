package it.uniroma2.algoritmi.web;

import it.unimi.dsi.logging.ProgressLogger;
import it.unimi.dsi.webgraph.ArcListASCIIGraph;
import it.unimi.dsi.webgraph.ImmutableGraph;
import it.unimi.dsi.webgraph.Transform;
import it.unimi.dsi.webgraph.algo.ConnectedComponents;
import it.unimi.dsi.webgraph.algo.HyperBall;
import it.unimi.dsi.webgraph.algo.NeighbourhoodFunction;
import it.unimi.dsi.webgraph.algo.ParallelBreadthFirstVisit;
import it.unimi.dsi.webgraph.algo.StronglyConnectedComponents;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class componentiConnesse {

	public static void main(String arg[]) throws IOException ,UnsupportedOperationException{
		// TODO Auto-generated method stub
		
		
		double archi, nodi,densità;

		ImmutableGraph graph1 = ArcListASCIIGraph.loadOffline(arg[0]);
			archi=graph1.numArcs();
			nodi =graph1.numNodes();
			
			
			System.out.println("ciao :"+graph1.toString());
			System.out.println("Numero nodi di un grafo: "+nodi);
			

			densità = archi/(nodi*(nodi-1));
		System.out.println("Dimensione di un grafo: "+ archi);
		System.out.println("Densità di un grafo orientato:"+densità );
		//System.out.println(graph1.outdegree(0));
		 System.out.println("Numero Componenti Connesse di un grafo: "+ConnectedComponents.compute(graph1, 0, new ProgressLogger()).numberOfComponents);
		 System.out.println("Numero Componenti fortemente connesse: "+ StronglyConnectedComponents.compute(graph1, false, new ProgressLogger()).numberOfComponents);
		 
		 
		 double sum=0,average;
		 List<Integer> temp = new ArrayList<Integer>();
		 for(int i = 0; i<nodi ;i++){
			temp.add(graph1.outdegree(i));
			sum= sum+graph1.outdegree(i); 
		 }
		 average = sum/nodi;
		 System.out.println("Numero medio grado nodo: "+ average);
		 System.out.println("Massimo: "+ Collections.max(temp));
		 System.out.println("Minimo:"+ Collections.min(temp));
		 System.out.println("lista"+temp);
		 
		 
		 ParallelBreadthFirstVisit grafo = new ParallelBreadthFirstVisit(graph1, 0,false,null);
		 for (int i=0 ; i< nodi ; i++){
			 System.out.println("i="+i+" nodi visitati: "+grafo.visit(i));

		 }
		
	//	 Bridge b = new Bridge();
		// b.numberOfBridge(graph1);
		 int rand = (int)(Math.random()*10);
		 HyperBall ball = new HyperBall(graph1, Transform.transpose(graph1), 20, new ProgressLogger() );
		 
		 System.out.println("ball: "+ball.discountFunction);
		 System.out.println("ball: "+ball.sumOfDistances);
		 System.out.println("ball:"+ball.registers().toString());
		 
		 NeighbourhoodFunction n = new NeighbourhoodFunction();
		 n.compute(graph1, new ProgressLogger());
	}

}
